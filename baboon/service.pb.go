// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v4.24.4
// source: baboon/service.proto

package baboon

import (
	newsdoc "github.com/ttab/elephant-api/newsdoc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FrameType int32

const (
	FrameType_FRAME_UNKNOWN FrameType = 0
	FrameType_FRAME_TEXT    FrameType = 1
	FrameType_FRAME_IMAGE   FrameType = 2
)

// Enum value maps for FrameType.
var (
	FrameType_name = map[int32]string{
		0: "FRAME_UNKNOWN",
		1: "FRAME_TEXT",
		2: "FRAME_IMAGE",
	}
	FrameType_value = map[string]int32{
		"FRAME_UNKNOWN": 0,
		"FRAME_TEXT":    1,
		"FRAME_IMAGE":   2,
	}
)

func (x FrameType) Enum() *FrameType {
	p := new(FrameType)
	*p = x
	return p
}

func (x FrameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FrameType) Descriptor() protoreflect.EnumDescriptor {
	return file_baboon_service_proto_enumTypes[0].Descriptor()
}

func (FrameType) Type() protoreflect.EnumType {
	return &file_baboon_service_proto_enumTypes[0]
}

func (x FrameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FrameType.Descriptor instead.
func (FrameType) EnumDescriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{0}
}

type CreateFlowRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// FlowUuid to instantiate on the given date. Required.
	FlowUuid string `protobuf:"bytes,1,opt,name=flow_uuid,json=flowUuid,proto3" json:"flow_uuid,omitempty"`
	// Date to instantiate the flow on in the format YYYY-MM-DD. Required.
	Date string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	// Articles to instantiate. Names of the defined print contents in the
	// flow. Optional, omit to instantiate all.
	Articles      []string `protobuf:"bytes,3,rep,name=articles,proto3" json:"articles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFlowRequest) Reset() {
	*x = CreateFlowRequest{}
	mi := &file_baboon_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlowRequest) ProtoMessage() {}

func (x *CreateFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlowRequest.ProtoReflect.Descriptor instead.
func (*CreateFlowRequest) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateFlowRequest) GetFlowUuid() string {
	if x != nil {
		return x.FlowUuid
	}
	return ""
}

func (x *CreateFlowRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *CreateFlowRequest) GetArticles() []string {
	if x != nil {
		return x.Articles
	}
	return nil
}

type CreateFlowResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Articles that were created.
	Articles      []*PrintArticleReference `protobuf:"bytes,1,rep,name=articles,proto3" json:"articles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFlowResponse) Reset() {
	*x = CreateFlowResponse{}
	mi := &file_baboon_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlowResponse) ProtoMessage() {}

func (x *CreateFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlowResponse.ProtoReflect.Descriptor instead.
func (*CreateFlowResponse) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateFlowResponse) GetArticles() []*PrintArticleReference {
	if x != nil {
		return x.Articles
	}
	return nil
}

type PrintArticleReference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrintArticleReference) Reset() {
	*x = PrintArticleReference{}
	mi := &file_baboon_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrintArticleReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrintArticleReference) ProtoMessage() {}

func (x *PrintArticleReference) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrintArticleReference.ProtoReflect.Descriptor instead.
func (*PrintArticleReference) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{2}
}

func (x *PrintArticleReference) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *PrintArticleReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CopyArticleToFlowRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// SourceUuid is the UUID of the article that we want to copy. Required.
	SourceUuid string `protobuf:"bytes,1,opt,name=source_uuid,json=sourceUuid,proto3" json:"source_uuid,omitempty"`
	// FlowUuid to copy the article to. Required.
	FlowUuid string `protobuf:"bytes,2,opt,name=flow_uuid,json=flowUuid,proto3" json:"flow_uuid,omitempty"`
	// Date to set for the copy on in the format YYYY-MM-DD. Required.
	Date string `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	// Article is the name of the defined print content in the flow to
	// instantiate. Required.
	Article       string `protobuf:"bytes,4,opt,name=article,proto3" json:"article,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CopyArticleToFlowRequest) Reset() {
	*x = CopyArticleToFlowRequest{}
	mi := &file_baboon_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyArticleToFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyArticleToFlowRequest) ProtoMessage() {}

func (x *CopyArticleToFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyArticleToFlowRequest.ProtoReflect.Descriptor instead.
func (*CopyArticleToFlowRequest) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{3}
}

func (x *CopyArticleToFlowRequest) GetSourceUuid() string {
	if x != nil {
		return x.SourceUuid
	}
	return ""
}

func (x *CopyArticleToFlowRequest) GetFlowUuid() string {
	if x != nil {
		return x.FlowUuid
	}
	return ""
}

func (x *CopyArticleToFlowRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *CopyArticleToFlowRequest) GetArticle() string {
	if x != nil {
		return x.Article
	}
	return ""
}

type CopyArticleToFlowResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Uuid of the created article.
	Uuid          string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CopyArticleToFlowResponse) Reset() {
	*x = CopyArticleToFlowResponse{}
	mi := &file_baboon_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyArticleToFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyArticleToFlowResponse) ProtoMessage() {}

func (x *CopyArticleToFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyArticleToFlowResponse.ProtoReflect.Descriptor instead.
func (*CopyArticleToFlowResponse) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{4}
}

func (x *CopyArticleToFlowResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type GetScribusInfoRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Uuid of the layout document to get information for. Required.
	Uuid          string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetScribusInfoRequest) Reset() {
	*x = GetScribusInfoRequest{}
	mi := &file_baboon_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetScribusInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScribusInfoRequest) ProtoMessage() {}

func (x *GetScribusInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScribusInfoRequest.ProtoReflect.Descriptor instead.
func (*GetScribusInfoRequest) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetScribusInfoRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type GetScribusInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fonts         []*ScribusDependency   `protobuf:"bytes,1,rep,name=fonts,proto3" json:"fonts,omitempty"`
	IccProfiles   []*ScribusDependency   `protobuf:"bytes,2,rep,name=icc_profiles,json=iccProfiles,proto3" json:"icc_profiles,omitempty"`
	Slots         []string               `protobuf:"bytes,3,rep,name=slots,proto3" json:"slots,omitempty"`
	Layers        []*ScribusLayer        `protobuf:"bytes,4,rep,name=layers,proto3" json:"layers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetScribusInfoResponse) Reset() {
	*x = GetScribusInfoResponse{}
	mi := &file_baboon_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetScribusInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScribusInfoResponse) ProtoMessage() {}

func (x *GetScribusInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScribusInfoResponse.ProtoReflect.Descriptor instead.
func (*GetScribusInfoResponse) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetScribusInfoResponse) GetFonts() []*ScribusDependency {
	if x != nil {
		return x.Fonts
	}
	return nil
}

func (x *GetScribusInfoResponse) GetIccProfiles() []*ScribusDependency {
	if x != nil {
		return x.IccProfiles
	}
	return nil
}

func (x *GetScribusInfoResponse) GetSlots() []string {
	if x != nil {
		return x.Slots
	}
	return nil
}

func (x *GetScribusInfoResponse) GetLayers() []*ScribusLayer {
	if x != nil {
		return x.Layers
	}
	return nil
}

type ScribusLayer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Slot          string                 `protobuf:"bytes,3,opt,name=slot,proto3" json:"slot,omitempty"`
	Frames        []*ScribusFrame        `protobuf:"bytes,4,rep,name=frames,proto3" json:"frames,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScribusLayer) Reset() {
	*x = ScribusLayer{}
	mi := &file_baboon_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScribusLayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScribusLayer) ProtoMessage() {}

func (x *ScribusLayer) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScribusLayer.ProtoReflect.Descriptor instead.
func (*ScribusLayer) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{7}
}

func (x *ScribusLayer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ScribusLayer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScribusLayer) GetSlot() string {
	if x != nil {
		return x.Slot
	}
	return ""
}

func (x *ScribusLayer) GetFrames() []*ScribusFrame {
	if x != nil {
		return x.Frames
	}
	return nil
}

type ScribusFrame struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Slot          string                 `protobuf:"bytes,2,opt,name=slot,proto3" json:"slot,omitempty"`
	Type          FrameType              `protobuf:"varint,3,opt,name=type,proto3,enum=ttab.baboon.FrameType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScribusFrame) Reset() {
	*x = ScribusFrame{}
	mi := &file_baboon_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScribusFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScribusFrame) ProtoMessage() {}

func (x *ScribusFrame) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScribusFrame.ProtoReflect.Descriptor instead.
func (*ScribusFrame) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{8}
}

func (x *ScribusFrame) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScribusFrame) GetSlot() string {
	if x != nil {
		return x.Slot
	}
	return ""
}

func (x *ScribusFrame) GetType() FrameType {
	if x != nil {
		return x.Type
	}
	return FrameType_FRAME_UNKNOWN
}

type ScribusDependency struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Satisfied     bool                   `protobuf:"varint,2,opt,name=satisfied,proto3" json:"satisfied,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScribusDependency) Reset() {
	*x = ScribusDependency{}
	mi := &file_baboon_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScribusDependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScribusDependency) ProtoMessage() {}

func (x *ScribusDependency) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScribusDependency.ProtoReflect.Descriptor instead.
func (*ScribusDependency) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{9}
}

func (x *ScribusDependency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScribusDependency) GetSatisfied() bool {
	if x != nil {
		return x.Satisfied
	}
	return false
}

type StoreFontRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Filename      string                 `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"`
	File          []byte                 `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreFontRequest) Reset() {
	*x = StoreFontRequest{}
	mi := &file_baboon_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreFontRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreFontRequest) ProtoMessage() {}

func (x *StoreFontRequest) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreFontRequest.ProtoReflect.Descriptor instead.
func (*StoreFontRequest) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{10}
}

func (x *StoreFontRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StoreFontRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StoreFontRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StoreFontRequest) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

type StoreFontResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreFontResponse) Reset() {
	*x = StoreFontResponse{}
	mi := &file_baboon_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreFontResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreFontResponse) ProtoMessage() {}

func (x *StoreFontResponse) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreFontResponse.ProtoReflect.Descriptor instead.
func (*StoreFontResponse) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{11}
}

func (x *StoreFontResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GetFontsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fonts to load, maximum of 20 fonts per batch.
	Fonts         []*FontRef `protobuf:"bytes,1,rep,name=fonts,proto3" json:"fonts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFontsRequest) Reset() {
	*x = GetFontsRequest{}
	mi := &file_baboon_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFontsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFontsRequest) ProtoMessage() {}

func (x *GetFontsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFontsRequest.ProtoReflect.Descriptor instead.
func (*GetFontsRequest) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetFontsRequest) GetFonts() []*FontRef {
	if x != nil {
		return x.Fonts
	}
	return nil
}

type FontRef struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// IfNotVersion can be used to only return a font if it hasn't been updated.
	IfNotVersion  string `protobuf:"bytes,2,opt,name=if_not_version,json=ifNotVersion,proto3" json:"if_not_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FontRef) Reset() {
	*x = FontRef{}
	mi := &file_baboon_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FontRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FontRef) ProtoMessage() {}

func (x *FontRef) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FontRef.ProtoReflect.Descriptor instead.
func (*FontRef) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{13}
}

func (x *FontRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FontRef) GetIfNotVersion() string {
	if x != nil {
		return x.IfNotVersion
	}
	return ""
}

type GetFontsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fonts         []*Font                `protobuf:"bytes,1,rep,name=fonts,proto3" json:"fonts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFontsResponse) Reset() {
	*x = GetFontsResponse{}
	mi := &file_baboon_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFontsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFontsResponse) ProtoMessage() {}

func (x *GetFontsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFontsResponse.ProtoReflect.Descriptor instead.
func (*GetFontsResponse) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetFontsResponse) GetFonts() []*Font {
	if x != nil {
		return x.Fonts
	}
	return nil
}

type Font struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version       string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	File          []byte                 `protobuf:"bytes,5,opt,name=file,proto3" json:"file,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Font) Reset() {
	*x = Font{}
	mi := &file_baboon_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Font) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Font) ProtoMessage() {}

func (x *Font) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Font.ProtoReflect.Descriptor instead.
func (*Font) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{15}
}

func (x *Font) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Font) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Font) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Font) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

type ListFontsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int64                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFontsRequest) Reset() {
	*x = ListFontsRequest{}
	mi := &file_baboon_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFontsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFontsRequest) ProtoMessage() {}

func (x *ListFontsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFontsRequest.ProtoReflect.Descriptor instead.
func (*ListFontsRequest) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{16}
}

func (x *ListFontsRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type ListFontsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*FontInfo            `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	NextPage      int64                  `protobuf:"varint,2,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFontsResponse) Reset() {
	*x = ListFontsResponse{}
	mi := &file_baboon_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFontsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFontsResponse) ProtoMessage() {}

func (x *ListFontsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFontsResponse.ProtoReflect.Descriptor instead.
func (*ListFontsResponse) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{17}
}

func (x *ListFontsResponse) GetItems() []*FontInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListFontsResponse) GetNextPage() int64 {
	if x != nil {
		return x.NextPage
	}
	return 0
}

type FontInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FontInfo) Reset() {
	*x = FontInfo{}
	mi := &file_baboon_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FontInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FontInfo) ProtoMessage() {}

func (x *FontInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FontInfo.ProtoReflect.Descriptor instead.
func (*FontInfo) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{18}
}

func (x *FontInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FontInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *FontInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type DeleteFontRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFontRequest) Reset() {
	*x = DeleteFontRequest{}
	mi := &file_baboon_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFontRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFontRequest) ProtoMessage() {}

func (x *DeleteFontRequest) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFontRequest.ProtoReflect.Descriptor instead.
func (*DeleteFontRequest) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteFontRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteFontResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFontResponse) Reset() {
	*x = DeleteFontResponse{}
	mi := &file_baboon_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFontResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFontResponse) ProtoMessage() {}

func (x *DeleteFontResponse) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFontResponse.ProtoReflect.Descriptor instead.
func (*DeleteFontResponse) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{20}
}

type StoreICCProfileRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is optional, will be extracted from ICC data if not provided. Setting
	// a name for the profile that differs from the one in the ICC data will not
	// make Scribus resolve it correctly. Forcing a different name should only be
	// done if baboon cannot parse the ICC file correctly.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	File          []byte `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreICCProfileRequest) Reset() {
	*x = StoreICCProfileRequest{}
	mi := &file_baboon_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreICCProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreICCProfileRequest) ProtoMessage() {}

func (x *StoreICCProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreICCProfileRequest.ProtoReflect.Descriptor instead.
func (*StoreICCProfileRequest) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{21}
}

func (x *StoreICCProfileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StoreICCProfileRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StoreICCProfileRequest) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

type StoreICCProfileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreICCProfileResponse) Reset() {
	*x = StoreICCProfileResponse{}
	mi := &file_baboon_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreICCProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreICCProfileResponse) ProtoMessage() {}

func (x *StoreICCProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreICCProfileResponse.ProtoReflect.Descriptor instead.
func (*StoreICCProfileResponse) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{22}
}

func (x *StoreICCProfileResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ListICCProfilesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int64                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListICCProfilesRequest) Reset() {
	*x = ListICCProfilesRequest{}
	mi := &file_baboon_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListICCProfilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListICCProfilesRequest) ProtoMessage() {}

func (x *ListICCProfilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListICCProfilesRequest.ProtoReflect.Descriptor instead.
func (*ListICCProfilesRequest) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{23}
}

func (x *ListICCProfilesRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type ListICCProfilesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*ICCProfileInfo      `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	NextPage      int64                  `protobuf:"varint,2,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListICCProfilesResponse) Reset() {
	*x = ListICCProfilesResponse{}
	mi := &file_baboon_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListICCProfilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListICCProfilesResponse) ProtoMessage() {}

func (x *ListICCProfilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListICCProfilesResponse.ProtoReflect.Descriptor instead.
func (*ListICCProfilesResponse) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{24}
}

func (x *ListICCProfilesResponse) GetItems() []*ICCProfileInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListICCProfilesResponse) GetNextPage() int64 {
	if x != nil {
		return x.NextPage
	}
	return 0
}

type ICCProfileInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ICCProfileInfo) Reset() {
	*x = ICCProfileInfo{}
	mi := &file_baboon_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ICCProfileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICCProfileInfo) ProtoMessage() {}

func (x *ICCProfileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICCProfileInfo.ProtoReflect.Descriptor instead.
func (*ICCProfileInfo) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{25}
}

func (x *ICCProfileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ICCProfileInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ICCProfileInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type RenderArticleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ArticleUuid is the UUID of the print article to render. Required.
	ArticleUuid string `protobuf:"bytes,1,opt,name=article_uuid,json=articleUuid,proto3" json:"article_uuid,omitempty"`
	// LayoutId is the ID of the article layout to render. Required.
	LayoutId string `protobuf:"bytes,2,opt,name=layout_id,json=layoutId,proto3" json:"layout_id,omitempty"`
	// RenderPDF will enable PDF rendering.
	RenderPdf bool `protobuf:"varint,3,opt,name=render_pdf,json=renderPdf,proto3" json:"render_pdf,omitempty"`
	// RenderPDF will enable PNG rendering.
	RenderPng bool `protobuf:"varint,4,opt,name=render_png,json=renderPng,proto3" json:"render_png,omitempty"`
	// PngScale is the DPI of the rendered PDF. Defaults to 200.
	PngScale      int64 `protobuf:"varint,5,opt,name=png_scale,json=pngScale,proto3" json:"png_scale,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenderArticleRequest) Reset() {
	*x = RenderArticleRequest{}
	mi := &file_baboon_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenderArticleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderArticleRequest) ProtoMessage() {}

func (x *RenderArticleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderArticleRequest.ProtoReflect.Descriptor instead.
func (*RenderArticleRequest) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{26}
}

func (x *RenderArticleRequest) GetArticleUuid() string {
	if x != nil {
		return x.ArticleUuid
	}
	return ""
}

func (x *RenderArticleRequest) GetLayoutId() string {
	if x != nil {
		return x.LayoutId
	}
	return ""
}

func (x *RenderArticleRequest) GetRenderPdf() bool {
	if x != nil {
		return x.RenderPdf
	}
	return false
}

func (x *RenderArticleRequest) GetRenderPng() bool {
	if x != nil {
		return x.RenderPng
	}
	return false
}

func (x *RenderArticleRequest) GetPngScale() int64 {
	if x != nil {
		return x.PngScale
	}
	return 0
}

type RenderArticleResponse struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Id         int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PdfUrl     string                 `protobuf:"bytes,2,opt,name=pdf_url,json=pdfUrl,proto3" json:"pdf_url,omitempty"`
	PngUrl     string                 `protobuf:"bytes,3,opt,name=png_url,json=pngUrl,proto3" json:"png_url,omitempty"`
	ScribusUrl string                 `protobuf:"bytes,4,opt,name=scribus_url,json=scribusUrl,proto3" json:"scribus_url,omitempty"`
	PngWidth   int32                  `protobuf:"varint,5,opt,name=png_width,json=pngWidth,proto3" json:"png_width,omitempty"`
	PngHeight  int32                  `protobuf:"varint,6,opt,name=png_height,json=pngHeight,proto3" json:"png_height,omitempty"`
	// Images that were mounted.
	Images []*MountedImage `protobuf:"bytes,7,rep,name=images,proto3" json:"images,omitempty"`
	// Overflows is a list of text frames whose contents overflowed the frame.
	Overflows     []*Overflow `protobuf:"bytes,8,rep,name=overflows,proto3" json:"overflows,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenderArticleResponse) Reset() {
	*x = RenderArticleResponse{}
	mi := &file_baboon_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenderArticleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderArticleResponse) ProtoMessage() {}

func (x *RenderArticleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderArticleResponse.ProtoReflect.Descriptor instead.
func (*RenderArticleResponse) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{27}
}

func (x *RenderArticleResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RenderArticleResponse) GetPdfUrl() string {
	if x != nil {
		return x.PdfUrl
	}
	return ""
}

func (x *RenderArticleResponse) GetPngUrl() string {
	if x != nil {
		return x.PngUrl
	}
	return ""
}

func (x *RenderArticleResponse) GetScribusUrl() string {
	if x != nil {
		return x.ScribusUrl
	}
	return ""
}

func (x *RenderArticleResponse) GetPngWidth() int32 {
	if x != nil {
		return x.PngWidth
	}
	return 0
}

func (x *RenderArticleResponse) GetPngHeight() int32 {
	if x != nil {
		return x.PngHeight
	}
	return 0
}

func (x *RenderArticleResponse) GetImages() []*MountedImage {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *RenderArticleResponse) GetOverflows() []*Overflow {
	if x != nil {
		return x.Overflows
	}
	return nil
}

type MountedImage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Frame name that was used for the image.
	Frame string `protobuf:"bytes,1,opt,name=frame,proto3" json:"frame,omitempty"`
	// BoundingBox for the image in 0.0-1.0 coordinates relative to the page width
	// and height.
	BoundingBox *Rect `protobuf:"bytes,2,opt,name=bounding_box,json=boundingBox,proto3" json:"bounding_box,omitempty"`
	// PPI before any PDF downsampling was applied.
	Ppi           float64 `protobuf:"fixed64,3,opt,name=ppi,proto3" json:"ppi,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MountedImage) Reset() {
	*x = MountedImage{}
	mi := &file_baboon_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountedImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountedImage) ProtoMessage() {}

func (x *MountedImage) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountedImage.ProtoReflect.Descriptor instead.
func (*MountedImage) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{28}
}

func (x *MountedImage) GetFrame() string {
	if x != nil {
		return x.Frame
	}
	return ""
}

func (x *MountedImage) GetBoundingBox() *Rect {
	if x != nil {
		return x.BoundingBox
	}
	return nil
}

func (x *MountedImage) GetPpi() float64 {
	if x != nil {
		return x.Ppi
	}
	return 0
}

type Overflow struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Frame name that overflowed.
	Frame string `protobuf:"bytes,1,opt,name=frame,proto3" json:"frame,omitempty"`
	// BoundingBox for the frame in 0.0-1.0 coordinates relative to the page width
	// and height.
	BoundingBox   *Rect `protobuf:"bytes,2,opt,name=bounding_box,json=boundingBox,proto3" json:"bounding_box,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Overflow) Reset() {
	*x = Overflow{}
	mi := &file_baboon_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Overflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Overflow) ProtoMessage() {}

func (x *Overflow) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Overflow.ProtoReflect.Descriptor instead.
func (*Overflow) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{29}
}

func (x *Overflow) GetFrame() string {
	if x != nil {
		return x.Frame
	}
	return ""
}

func (x *Overflow) GetBoundingBox() *Rect {
	if x != nil {
		return x.BoundingBox
	}
	return nil
}

type Rect struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             float64                `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y             float64                `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	Width         float64                `protobuf:"fixed64,3,opt,name=width,proto3" json:"width,omitempty"`
	Height        float64                `protobuf:"fixed64,4,opt,name=height,proto3" json:"height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Rect) Reset() {
	*x = Rect{}
	mi := &file_baboon_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Rect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rect) ProtoMessage() {}

func (x *Rect) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rect.ProtoReflect.Descriptor instead.
func (*Rect) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{30}
}

func (x *Rect) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Rect) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Rect) GetWidth() float64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Rect) GetHeight() float64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type GetEditableArchiveRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RenderId      int64                  `protobuf:"varint,1,opt,name=render_id,json=renderId,proto3" json:"render_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEditableArchiveRequest) Reset() {
	*x = GetEditableArchiveRequest{}
	mi := &file_baboon_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEditableArchiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEditableArchiveRequest) ProtoMessage() {}

func (x *GetEditableArchiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEditableArchiveRequest.ProtoReflect.Descriptor instead.
func (*GetEditableArchiveRequest) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{31}
}

func (x *GetEditableArchiveRequest) GetRenderId() int64 {
	if x != nil {
		return x.RenderId
	}
	return 0
}

type GetEditableArchiveResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEditableArchiveResponse) Reset() {
	*x = GetEditableArchiveResponse{}
	mi := &file_baboon_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEditableArchiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEditableArchiveResponse) ProtoMessage() {}

func (x *GetEditableArchiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEditableArchiveResponse.ProtoReflect.Descriptor instead.
func (*GetEditableArchiveResponse) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{32}
}

type LayoutPreviewRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SlaFile       string                 `protobuf:"bytes,1,opt,name=sla_file,json=slaFile,proto3" json:"sla_file,omitempty"`
	Layout        *newsdoc.Document      `protobuf:"bytes,2,opt,name=layout,proto3" json:"layout,omitempty"`
	ContentUuid   string                 `protobuf:"bytes,3,opt,name=content_uuid,json=contentUuid,proto3" json:"content_uuid,omitempty"`
	Content       *newsdoc.Document      `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	ArticleLayout string                 `protobuf:"bytes,5,opt,name=article_layout,json=articleLayout,proto3" json:"article_layout,omitempty"`
	Features      map[string]bool        `protobuf:"bytes,6,rep,name=features,proto3" json:"features,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LayoutPreviewRequest) Reset() {
	*x = LayoutPreviewRequest{}
	mi := &file_baboon_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LayoutPreviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LayoutPreviewRequest) ProtoMessage() {}

func (x *LayoutPreviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LayoutPreviewRequest.ProtoReflect.Descriptor instead.
func (*LayoutPreviewRequest) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{33}
}

func (x *LayoutPreviewRequest) GetSlaFile() string {
	if x != nil {
		return x.SlaFile
	}
	return ""
}

func (x *LayoutPreviewRequest) GetLayout() *newsdoc.Document {
	if x != nil {
		return x.Layout
	}
	return nil
}

func (x *LayoutPreviewRequest) GetContentUuid() string {
	if x != nil {
		return x.ContentUuid
	}
	return ""
}

func (x *LayoutPreviewRequest) GetContent() *newsdoc.Document {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *LayoutPreviewRequest) GetArticleLayout() string {
	if x != nil {
		return x.ArticleLayout
	}
	return ""
}

func (x *LayoutPreviewRequest) GetFeatures() map[string]bool {
	if x != nil {
		return x.Features
	}
	return nil
}

type LayoutPreviewResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PDFData produced by the render.
	PdfData []byte `protobuf:"bytes,1,opt,name=pdf_data,json=pdfData,proto3" json:"pdf_data,omitempty"`
	// Images that were mounted.
	Images []*MountedImage `protobuf:"bytes,2,rep,name=images,proto3" json:"images,omitempty"`
	// Overflows is a list of text frames whose contents overflowed the frame.
	Overflows []*Overflow `protobuf:"bytes,3,rep,name=overflows,proto3" json:"overflows,omitempty"`
	// ScribusDoc is the Scribus document used to render the preview.
	ScribusDoc    []byte `protobuf:"bytes,4,opt,name=scribus_doc,json=scribusDoc,proto3" json:"scribus_doc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LayoutPreviewResponse) Reset() {
	*x = LayoutPreviewResponse{}
	mi := &file_baboon_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LayoutPreviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LayoutPreviewResponse) ProtoMessage() {}

func (x *LayoutPreviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_baboon_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LayoutPreviewResponse.ProtoReflect.Descriptor instead.
func (*LayoutPreviewResponse) Descriptor() ([]byte, []int) {
	return file_baboon_service_proto_rawDescGZIP(), []int{34}
}

func (x *LayoutPreviewResponse) GetPdfData() []byte {
	if x != nil {
		return x.PdfData
	}
	return nil
}

func (x *LayoutPreviewResponse) GetImages() []*MountedImage {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *LayoutPreviewResponse) GetOverflows() []*Overflow {
	if x != nil {
		return x.Overflows
	}
	return nil
}

func (x *LayoutPreviewResponse) GetScribusDoc() []byte {
	if x != nil {
		return x.ScribusDoc
	}
	return nil
}

var File_baboon_service_proto protoreflect.FileDescriptor

var file_baboon_service_proto_rawDesc = []byte{
	0x0a, 0x14, 0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62, 0x61, 0x62,
	0x6f, 0x6f, 0x6e, 0x1a, 0x15, 0x6e, 0x65, 0x77, 0x73, 0x64, 0x6f, 0x63, 0x2f, 0x6e, 0x65, 0x77,
	0x73, 0x64, 0x6f, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x60, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f,
	0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x22, 0x3f, 0x0a, 0x15, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x70, 0x79, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x22, 0x2f, 0x0a, 0x19,
	0x43, 0x6f, 0x70, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x6f, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x2b, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x69, 0x62, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0xda, 0x01, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x53, 0x63, 0x72, 0x69, 0x62, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f,
	0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x62, 0x75, 0x73, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x05, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x69,
	0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2e,
	0x53, 0x63, 0x72, 0x69, 0x62, 0x75, 0x73, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x0b, 0x69, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x6c, 0x6f, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f,
	0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x62, 0x75, 0x73, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x79, 0x0a, 0x0c, 0x53, 0x63, 0x72, 0x69, 0x62,
	0x75, 0x73, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12,
	0x31, 0x0a, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2e, 0x53, 0x63,
	0x72, 0x69, 0x62, 0x75, 0x73, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x22, 0x62, 0x0a, 0x0c, 0x53, 0x63, 0x72, 0x69, 0x62, 0x75, 0x73, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e,
	0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x45, 0x0a, 0x11, 0x53, 0x63, 0x72, 0x69, 0x62, 0x75,
	0x73, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x22, 0x78, 0x0a,
	0x10, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x6f, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x2d, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x46, 0x6f, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x66, 0x6f, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e,
	0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x52, 0x05,
	0x66, 0x6f, 0x6e, 0x74, 0x73, 0x22, 0x43, 0x0a, 0x07, 0x46, 0x6f, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x66,
	0x4e, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x46, 0x6f, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x05, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x74, 0x74, 0x61, 0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x6e, 0x74,
	0x52, 0x05, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x22, 0x6a, 0x0a, 0x04, 0x46, 0x6f, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x22, 0x26, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x5d, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x6f, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2e, 0x46, 0x6f,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x22, 0x5a, 0x0a, 0x08, 0x46, 0x6f,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x27, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x6f, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x43,
	0x43, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x33, 0x0a, 0x17, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x43, 0x43, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2c,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x43, 0x43, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x69, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x43, 0x43, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62, 0x61,
	0x62, 0x6f, 0x6f, 0x6e, 0x2e, 0x49, 0x43, 0x43, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x22, 0x60, 0x0a, 0x0e, 0x49, 0x43, 0x43, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb1, 0x01, 0x0a, 0x14, 0x52, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x64, 0x66,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x64,
	0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6e, 0x67,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6e, 0x67, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x9e, 0x02,
	0x0a, 0x15, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x64, 0x66, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x64, 0x66, 0x55, 0x72, 0x6c,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x75, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x75, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6e,
	0x67, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x6e, 0x67, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6e, 0x67, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6e, 0x67,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62, 0x61,
	0x62, 0x6f, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x6f, 0x76, 0x65,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74,
	0x74, 0x61, 0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0x6c,
	0x0a, 0x0c, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x62, 0x6f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x74, 0x61,
	0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x74, 0x52, 0x0b, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x70,
	0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x70, 0x69, 0x22, 0x56, 0x0a, 0x08,
	0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x0c, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x74, 0x52, 0x0b, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x42, 0x6f, 0x78, 0x22, 0x50, 0x0a, 0x04, 0x52, 0x65, 0x63, 0x74, 0x12, 0x0c, 0x0a, 0x01,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x38, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x45, 0x64, 0x69,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdd,
	0x02, 0x0a, 0x14, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6c, 0x61, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x61, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x64, 0x6f, 0x63, 0x2e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x64, 0x6f, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x12, 0x4b, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62, 0x61,
	0x62, 0x6f, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbb,
	0x01, 0x0a, 0x15, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x64, 0x66, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x64, 0x66, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f, 0x6f,
	0x6e, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x74, 0x61, 0x62,
	0x2e, 0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x75, 0x73, 0x5f, 0x64, 0x6f, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x62, 0x75, 0x73, 0x44, 0x6f, 0x63, 0x2a, 0x3f, 0x0a, 0x09,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x02, 0x32, 0xf4, 0x03,
	0x0a, 0x06, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x46, 0x6f, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62, 0x61, 0x62,
	0x6f, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x6f, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x6f, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6e, 0x74, 0x73,
	0x12, 0x1c, 0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x6f, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x6f, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a,
	0x09, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x74, 0x74, 0x61,
	0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x74, 0x61, 0x62,
	0x2e, 0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x6f, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62,
	0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62,
	0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x49, 0x43, 0x43, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x23, 0x2e, 0x74, 0x74,
	0x61, 0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x43, 0x43, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x49, 0x43, 0x43, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x43,
	0x43, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x74, 0x74, 0x61, 0x62,
	0x2e, 0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x43, 0x43, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x43, 0x43, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0xac, 0x04, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x56,
	0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12,
	0x21, 0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x45, 0x64, 0x69,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x26, 0x2e, 0x74,
	0x74, 0x61, 0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x64,
	0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f,
	0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a,
	0x0d, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x21,
	0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2e,
	0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x12, 0x1e, 0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f, 0x6f,
	0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f, 0x6f,
	0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x43, 0x6f, 0x70, 0x79, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x25, 0x2e, 0x74, 0x74, 0x61, 0x62,
	0x2e, 0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x70, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x72, 0x69, 0x62, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x2e, 0x74, 0x74, 0x61,
	0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x69,
	0x62, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x74, 0x74, 0x61, 0x62, 0x2e, 0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x63, 0x72, 0x69, 0x62, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x23, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x74, 0x74, 0x61, 0x62, 0x2f, 0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x2f, 0x72, 0x70,
	0x63, 0x2f, 0x62, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_baboon_service_proto_rawDescOnce sync.Once
	file_baboon_service_proto_rawDescData = file_baboon_service_proto_rawDesc
)

func file_baboon_service_proto_rawDescGZIP() []byte {
	file_baboon_service_proto_rawDescOnce.Do(func() {
		file_baboon_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_baboon_service_proto_rawDescData)
	})
	return file_baboon_service_proto_rawDescData
}

var file_baboon_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_baboon_service_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_baboon_service_proto_goTypes = []any{
	(FrameType)(0),                     // 0: ttab.baboon.FrameType
	(*CreateFlowRequest)(nil),          // 1: ttab.baboon.CreateFlowRequest
	(*CreateFlowResponse)(nil),         // 2: ttab.baboon.CreateFlowResponse
	(*PrintArticleReference)(nil),      // 3: ttab.baboon.PrintArticleReference
	(*CopyArticleToFlowRequest)(nil),   // 4: ttab.baboon.CopyArticleToFlowRequest
	(*CopyArticleToFlowResponse)(nil),  // 5: ttab.baboon.CopyArticleToFlowResponse
	(*GetScribusInfoRequest)(nil),      // 6: ttab.baboon.GetScribusInfoRequest
	(*GetScribusInfoResponse)(nil),     // 7: ttab.baboon.GetScribusInfoResponse
	(*ScribusLayer)(nil),               // 8: ttab.baboon.ScribusLayer
	(*ScribusFrame)(nil),               // 9: ttab.baboon.ScribusFrame
	(*ScribusDependency)(nil),          // 10: ttab.baboon.ScribusDependency
	(*StoreFontRequest)(nil),           // 11: ttab.baboon.StoreFontRequest
	(*StoreFontResponse)(nil),          // 12: ttab.baboon.StoreFontResponse
	(*GetFontsRequest)(nil),            // 13: ttab.baboon.GetFontsRequest
	(*FontRef)(nil),                    // 14: ttab.baboon.FontRef
	(*GetFontsResponse)(nil),           // 15: ttab.baboon.GetFontsResponse
	(*Font)(nil),                       // 16: ttab.baboon.Font
	(*ListFontsRequest)(nil),           // 17: ttab.baboon.ListFontsRequest
	(*ListFontsResponse)(nil),          // 18: ttab.baboon.ListFontsResponse
	(*FontInfo)(nil),                   // 19: ttab.baboon.FontInfo
	(*DeleteFontRequest)(nil),          // 20: ttab.baboon.DeleteFontRequest
	(*DeleteFontResponse)(nil),         // 21: ttab.baboon.DeleteFontResponse
	(*StoreICCProfileRequest)(nil),     // 22: ttab.baboon.StoreICCProfileRequest
	(*StoreICCProfileResponse)(nil),    // 23: ttab.baboon.StoreICCProfileResponse
	(*ListICCProfilesRequest)(nil),     // 24: ttab.baboon.ListICCProfilesRequest
	(*ListICCProfilesResponse)(nil),    // 25: ttab.baboon.ListICCProfilesResponse
	(*ICCProfileInfo)(nil),             // 26: ttab.baboon.ICCProfileInfo
	(*RenderArticleRequest)(nil),       // 27: ttab.baboon.RenderArticleRequest
	(*RenderArticleResponse)(nil),      // 28: ttab.baboon.RenderArticleResponse
	(*MountedImage)(nil),               // 29: ttab.baboon.MountedImage
	(*Overflow)(nil),                   // 30: ttab.baboon.Overflow
	(*Rect)(nil),                       // 31: ttab.baboon.Rect
	(*GetEditableArchiveRequest)(nil),  // 32: ttab.baboon.GetEditableArchiveRequest
	(*GetEditableArchiveResponse)(nil), // 33: ttab.baboon.GetEditableArchiveResponse
	(*LayoutPreviewRequest)(nil),       // 34: ttab.baboon.LayoutPreviewRequest
	(*LayoutPreviewResponse)(nil),      // 35: ttab.baboon.LayoutPreviewResponse
	nil,                                // 36: ttab.baboon.LayoutPreviewRequest.FeaturesEntry
	(*newsdoc.Document)(nil),           // 37: newsdoc.Document
}
var file_baboon_service_proto_depIdxs = []int32{
	3,  // 0: ttab.baboon.CreateFlowResponse.articles:type_name -> ttab.baboon.PrintArticleReference
	10, // 1: ttab.baboon.GetScribusInfoResponse.fonts:type_name -> ttab.baboon.ScribusDependency
	10, // 2: ttab.baboon.GetScribusInfoResponse.icc_profiles:type_name -> ttab.baboon.ScribusDependency
	8,  // 3: ttab.baboon.GetScribusInfoResponse.layers:type_name -> ttab.baboon.ScribusLayer
	9,  // 4: ttab.baboon.ScribusLayer.frames:type_name -> ttab.baboon.ScribusFrame
	0,  // 5: ttab.baboon.ScribusFrame.type:type_name -> ttab.baboon.FrameType
	14, // 6: ttab.baboon.GetFontsRequest.fonts:type_name -> ttab.baboon.FontRef
	16, // 7: ttab.baboon.GetFontsResponse.fonts:type_name -> ttab.baboon.Font
	19, // 8: ttab.baboon.ListFontsResponse.items:type_name -> ttab.baboon.FontInfo
	26, // 9: ttab.baboon.ListICCProfilesResponse.items:type_name -> ttab.baboon.ICCProfileInfo
	29, // 10: ttab.baboon.RenderArticleResponse.images:type_name -> ttab.baboon.MountedImage
	30, // 11: ttab.baboon.RenderArticleResponse.overflows:type_name -> ttab.baboon.Overflow
	31, // 12: ttab.baboon.MountedImage.bounding_box:type_name -> ttab.baboon.Rect
	31, // 13: ttab.baboon.Overflow.bounding_box:type_name -> ttab.baboon.Rect
	37, // 14: ttab.baboon.LayoutPreviewRequest.layout:type_name -> newsdoc.Document
	37, // 15: ttab.baboon.LayoutPreviewRequest.content:type_name -> newsdoc.Document
	36, // 16: ttab.baboon.LayoutPreviewRequest.features:type_name -> ttab.baboon.LayoutPreviewRequest.FeaturesEntry
	29, // 17: ttab.baboon.LayoutPreviewResponse.images:type_name -> ttab.baboon.MountedImage
	30, // 18: ttab.baboon.LayoutPreviewResponse.overflows:type_name -> ttab.baboon.Overflow
	11, // 19: ttab.baboon.Assets.StoreFont:input_type -> ttab.baboon.StoreFontRequest
	13, // 20: ttab.baboon.Assets.GetFonts:input_type -> ttab.baboon.GetFontsRequest
	17, // 21: ttab.baboon.Assets.ListFonts:input_type -> ttab.baboon.ListFontsRequest
	20, // 22: ttab.baboon.Assets.DeleteFont:input_type -> ttab.baboon.DeleteFontRequest
	22, // 23: ttab.baboon.Assets.StoreICCProfile:input_type -> ttab.baboon.StoreICCProfileRequest
	24, // 24: ttab.baboon.Assets.ListICCProfiles:input_type -> ttab.baboon.ListICCProfilesRequest
	27, // 25: ttab.baboon.Print.RenderArticle:input_type -> ttab.baboon.RenderArticleRequest
	32, // 26: ttab.baboon.Print.GetEditableArchive:input_type -> ttab.baboon.GetEditableArchiveRequest
	34, // 27: ttab.baboon.Print.LayoutPreview:input_type -> ttab.baboon.LayoutPreviewRequest
	1,  // 28: ttab.baboon.Print.CreateFlow:input_type -> ttab.baboon.CreateFlowRequest
	4,  // 29: ttab.baboon.Print.CopyArticleToFlow:input_type -> ttab.baboon.CopyArticleToFlowRequest
	6,  // 30: ttab.baboon.Print.GetScribusInfo:input_type -> ttab.baboon.GetScribusInfoRequest
	12, // 31: ttab.baboon.Assets.StoreFont:output_type -> ttab.baboon.StoreFontResponse
	15, // 32: ttab.baboon.Assets.GetFonts:output_type -> ttab.baboon.GetFontsResponse
	18, // 33: ttab.baboon.Assets.ListFonts:output_type -> ttab.baboon.ListFontsResponse
	21, // 34: ttab.baboon.Assets.DeleteFont:output_type -> ttab.baboon.DeleteFontResponse
	23, // 35: ttab.baboon.Assets.StoreICCProfile:output_type -> ttab.baboon.StoreICCProfileResponse
	25, // 36: ttab.baboon.Assets.ListICCProfiles:output_type -> ttab.baboon.ListICCProfilesResponse
	28, // 37: ttab.baboon.Print.RenderArticle:output_type -> ttab.baboon.RenderArticleResponse
	33, // 38: ttab.baboon.Print.GetEditableArchive:output_type -> ttab.baboon.GetEditableArchiveResponse
	35, // 39: ttab.baboon.Print.LayoutPreview:output_type -> ttab.baboon.LayoutPreviewResponse
	2,  // 40: ttab.baboon.Print.CreateFlow:output_type -> ttab.baboon.CreateFlowResponse
	5,  // 41: ttab.baboon.Print.CopyArticleToFlow:output_type -> ttab.baboon.CopyArticleToFlowResponse
	7,  // 42: ttab.baboon.Print.GetScribusInfo:output_type -> ttab.baboon.GetScribusInfoResponse
	31, // [31:43] is the sub-list for method output_type
	19, // [19:31] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_baboon_service_proto_init() }
func file_baboon_service_proto_init() {
	if File_baboon_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_baboon_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_baboon_service_proto_goTypes,
		DependencyIndexes: file_baboon_service_proto_depIdxs,
		EnumInfos:         file_baboon_service_proto_enumTypes,
		MessageInfos:      file_baboon_service_proto_msgTypes,
	}.Build()
	File_baboon_service_proto = out.File
	file_baboon_service_proto_rawDesc = nil
	file_baboon_service_proto_goTypes = nil
	file_baboon_service_proto_depIdxs = nil
}
